// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contracts/crypto.cdc (4.419kB)

package internal

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contractsCryptoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5d\x6f\xdb\x36\x17\xbe\xf7\xaf\x38\x6f\xaf\x12\xbc\xae\xe2\x01\xc3\x30\x08\x50\x83\x6e\x6b\xb7\x20\x1d\x36\x24\xcd\x72\x61\x18\x2d\x63\x1d\x4b\x84\x55\xca\x20\x8f\xec\x08\x81\xff\xfb\x40\x51\x1f\xfc\x90\x32\x67\xc8\x74\x13\xc9\x7c\xce\x27\x9f\xe7\x48\xcc\x6c\x57\x3d\xc0\xba\x14\x24\xd9\x9a\xe0\x67\x59\xef\xa8\x84\xa7\xd9\x0c\x00\x40\x2f\x6d\x2a\x01\x39\x53\xf9\xd9\x17\x48\x19\xb1\x18\x96\x77\x57\x82\x7e\x5c\xcd\x81\x15\x59\x29\x39\xe5\xdf\x62\xf8\x8d\xa9\xfc\x7d\xf7\x78\xde\x63\xe0\xa9\x71\xa3\x2f\x89\x54\x49\x31\xd8\x44\x8d\x4f\xed\xf1\xbc\xc1\x1c\xc3\x88\xf7\x9c\xf2\xcf\x2c\x0b\x03\x13\xcb\x62\xb8\x25\xc9\x45\xf6\x1a\x59\x74\x71\x74\x94\xd6\x39\xb1\x2c\x48\x4b\x91\xac\xd6\x04\xd7\x58\x7f\xe2\x8a\x3e\x08\x92\xb5\xe5\x59\x23\x0a\x24\xd8\x62\x7d\x25\x52\x7c\x8c\xe1\x4a\x50\xb0\xba\xab\x1e\x0a\xbe\xbe\xc6\x3a\x86\x3f\xbb\xdb\x00\x94\xdb\x65\x78\x55\x05\xe0\x03\xf2\x2c\xa7\x18\xee\x3e\xf2\xc7\x1f\xbe\x0f\x96\xb9\xba\xc1\x7d\xb9\xc5\x34\x86\x9f\xca\xb2\x98\xf5\x00\x2e\x38\x9d\xf5\x4f\xfa\x72\x32\x9f\x3b\x4b\x63\x69\xbb\x88\xe7\x72\x76\x91\x6e\xc2\xee\x9a\x9f\x6d\xf7\xfb\xb9\xd5\x68\x7d\x29\x2c\x36\x51\x97\x2f\x24\x7d\xea\x21\xa8\xcf\x1c\x92\xa1\x8a\x10\xe6\xa4\x0f\x89\x5b\x4e\x08\x37\x35\x40\xd2\x16\x13\x02\xfa\x42\x20\x19\x8a\xea\x61\xc7\xe7\xa9\xd5\xa9\xaf\x59\x95\x7c\xdf\x6c\x24\x0a\x92\x1c\x55\x0c\x4b\x9b\x80\x2b\x6f\x43\x47\x1b\xd5\x9a\x42\x02\xcb\x95\x95\x43\x7f\x7b\x71\x71\x01\xef\xd3\x54\x01\x03\x81\x07\xdd\x4c\x38\x70\xca\x81\x72\x84\x8c\xef\x51\xf8\x65\x76\x22\x65\x69\xea\x52\xe8\xcb\x7f\xc8\x94\x81\x0c\xb1\xaf\x41\xc7\xca\x16\x21\x24\x4e\x07\xa2\x02\x45\x46\x79\x00\xc7\xc6\x4f\xe2\xb8\x75\x0b\x03\x47\x1f\xdd\xdd\x3c\xc0\x58\xe5\xef\xc6\xcb\x1f\x69\x41\x3e\xdd\x02\xbb\x0d\xe6\x6f\xb8\x6e\x89\x66\xc3\x0a\x85\x0e\xe0\x7c\x92\x0e\x11\xdb\xed\x50\xa4\x67\x4d\xf1\x2e\xac\x9d\x92\xcd\xca\x14\x61\x6e\x1a\x8c\x6a\x48\xa2\x19\xc3\xc8\xe2\x0b\x6f\xba\x03\x7c\x03\x9c\x00\x1f\xb9\x22\x15\x79\xd6\x46\x1d\x5b\xac\x15\x30\x89\xc0\x8a\x03\xab\x55\x1b\x19\xd3\x39\x3c\x54\x8d\xc3\x1a\x72\xb6\x47\xf8\xda\x17\xf9\x15\x36\x1c\x8b\x14\x14\x12\x50\x09\x24\x2b\x0c\x78\x99\x21\x9d\x39\xd3\xcc\xa3\xcc\xa5\xa7\x12\xbe\x19\x18\xf3\x6e\x94\x32\x9e\x81\xd5\x24\xc1\x0b\x67\xe9\x38\x1b\x6b\xa5\xed\x72\xd9\xc5\x9a\x14\xe3\xef\x4c\x6e\x9f\xeb\x2c\x48\xd3\x0b\xd3\xa5\xb4\x44\x05\xa2\x24\x48\xb1\x40\x42\xe0\xa1\x50\x0d\xde\xeb\xc9\xeb\x35\xc1\x6b\x80\xfd\xa4\xe5\xb5\xae\xa4\x44\xd1\xaa\x35\xf9\xa7\x5e\x80\xc7\xd3\x01\xf2\x02\x85\xda\x21\xa3\x93\xe4\xea\x58\x9c\xae\x5d\xc7\xec\x44\x21\x3b\x36\x27\xa8\xda\xe1\x38\x38\xa2\x9e\x12\xa5\xac\x50\x6f\xe8\xc0\x1b\xc5\x33\xc1\xa8\x92\x68\xe4\xb6\x67\x05\x4f\x61\x53\x4a\x0f\x82\x69\xf3\xad\x15\x10\x68\x8f\x92\x6f\xbc\x8e\xf7\x2e\x6f\x91\x86\xd7\xd2\x6d\xf7\xeb\x6a\x1e\xa0\x31\xfd\xc5\xfe\x90\xb3\x27\xba\x7e\xdd\xfb\x93\x7c\xcf\xa4\x49\xf4\xbe\xe9\x91\xea\xde\x04\x90\xc0\x22\x5a\x84\x53\x5f\x21\x8a\xeb\x66\xaf\xf9\x5a\xbf\x29\x9f\xae\x04\x19\xcf\x47\x48\xe0\xc9\x53\xa6\x2e\xbe\x2f\x01\xb8\x70\xea\xf1\x53\x31\x0d\x86\x0f\x42\x69\x70\xa7\x4c\x23\x46\xae\x4c\x96\xa1\x05\xdf\x0c\x4e\xa3\x97\x8b\x0b\x86\xf9\x11\x0e\x76\x08\x67\x8d\x9f\x24\x57\x56\x96\x39\x33\x43\x82\x15\x12\x59\x5a\xc3\x03\xea\x2d\x47\x14\xe3\x69\x3b\xad\x5c\x86\x55\xac\xe0\xf2\xd2\x64\xf5\x7a\x89\xdf\xe0\xba\x94\xa9\xd7\xdd\x03\x53\x13\x69\x9e\x90\x63\x62\xb4\x33\x16\xec\x57\x34\x63\x95\xad\xa9\x62\x85\x0e\x18\xc2\xda\x4f\x09\x7f\x66\x8d\x44\x3a\x89\x2d\x66\x03\xda\xd9\x3d\xda\xf6\x2d\xd6\xd6\xa7\xe3\xeb\x33\x02\x6d\xc6\x3f\x47\xdb\xff\xe9\x4c\xfa\x29\x18\x8d\xc9\xbf\xdf\x86\xce\x63\x6c\x91\xbd\xbf\x0b\x07\x1b\x78\xc3\x60\xb8\x1f\xc7\xa6\xe5\x37\xc6\xc5\x2d\xee\x98\x64\xc4\x4b\xf1\x59\x9f\xcf\xcc\x31\x35\x1a\x59\xbb\x53\x28\xc7\x1d\xb9\x93\x5b\x17\x38\xfd\x95\x0f\x23\x87\x8e\xee\x7a\xe9\x06\xd8\x23\x0c\x12\xf7\xf1\xff\xcd\x96\x8f\x9c\x22\xc6\x3f\x23\x1c\xdb\x77\x09\x7c\x17\x2d\x4e\x3d\x54\xf4\x73\xf9\xc5\x67\x56\x6b\x83\xbb\xc1\xed\x60\x9a\x83\x87\x7b\x78\x1c\xb1\xf9\xf7\x47\xb8\x81\xb2\xc9\xe0\x77\xa2\xec\xee\xb4\x34\x41\x8c\xee\xbf\x06\x06\x1d\x9c\x98\x9a\x70\x13\xa6\x90\xc0\x9b\x8f\x9f\xfe\xb8\x7f\xfb\xd7\x22\x5a\xbc\xad\x14\xca\x37\x6d\xe4\xe3\xec\xef\x00\x00\x00\xff\xff\x4b\x1f\x7b\xe3\x43\x11\x00\x00"

func contractsCryptoCdcBytes() ([]byte, error) {
	return bindataRead(
		_contractsCryptoCdc,
		"contracts/crypto.cdc",
	)
}

func contractsCryptoCdc() (*asset, error) {
	bytes, err := contractsCryptoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/crypto.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x78, 0xaf, 0x5e, 0x9d, 0x55, 0xce, 0x2f, 0xb6, 0x25, 0x2c, 0xc6, 0x74, 0x72, 0xcf, 0xd8, 0xa7, 0x22, 0xc6, 0x92, 0xc6, 0xd8, 0x3a, 0x97, 0x92, 0xdc, 0x73, 0x87, 0x0, 0x7, 0x9c, 0x1f, 0x4d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contracts/crypto.cdc": contractsCryptoCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contracts": {nil, map[string]*bintree{
		"crypto.cdc": {contractsCryptoCdc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
